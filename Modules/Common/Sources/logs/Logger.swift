//
//  Logger.swift
//  Logger
//
//  Created by Alexander Ivlev on 22/02/2019.
//

import Foundation

/// –ë–∞–∑–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞
public let log = Logger.global

/// –ö–ª–∞—Å—Å –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é `log`
public class Logger
{
    public static let global: Logger = Logger()

    private var destinations: [LogDestination] = []
    private var queue = Queue()

    /// –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ—Ç–æ–∫ –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –¢–æ –µ—Å—Ç—å –≤ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≥–æ—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ª–æ–≥–≥–µ—Ä–∞.
    ///
    /// - Parameter destination: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ª–æ–≥–µ—Ä–∞
    public func addDestination(_ destination: LogDestination) {
        destinations.append(destination)
    }

    /// –£–¥–∞–ª—è–µ—Ç –ø–æ—Ç–æ–∫ –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
    ///
    /// - Parameter destination: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ª–æ–≥–µ—Ä–∞
    public func removeDestination(_ destination: LogDestination) {
        destinations.removeAll { $0 === destination }
    }

    /// –û—Å–Ω–æ–≤–Ω–∞—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è. –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–∑—ã–≤–∞—é—Ç –µ—ë.
    /// –¢–∞–∫ –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–¥–µ–ª–∞–Ω–æ –Ω–∞ `autoclosure` –Ω–∞–¥–æ –±—ã—Ç—å –∞–∫–∫—É—Ä–∞—Ç–Ω–µ–π –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Ç–æ–ª—å–∫–æ –Ω–µ –∏–∑–º–µ–Ω—è–µ–º—ã–µ –ø–æ–ª—è.
    /// –ü—Ä–∏—á–∏–Ω–∞ —ç—Ç–æ–≥–æ –≤ —Ç–æ–º, —á—Ç–æ —Å–∞–º closure –º–æ–∂–µ—Ç –≤—ã—á–∏—Å–ª–∏—Ç—å—Å—è –Ω–∞–º–Ω–æ–≥–æ –ø–æ–∑–∂–µ —á–µ–º –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏.
    ///
    /// - Parameters:
    ///   - level: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è. –î–ª—è –±–æ–ª—å—à–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º. `LogLevel`
    ///   - msgClosure: —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –≤—ã–≤–µ–¥–µ–Ω–æ. –°–¥–µ–ª–∞–Ω–æ `autoclosure` –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è.
    ///   - path: –ø—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞ - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    ///   - line: —Å—Ç—Ä–æ—á–∫–∞ –∫–æ–¥–∞ –≤ —Ñ–∞–π–ª–µ - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    ///   - fun: –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Ñ–∞–π–ª–µ - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    public func other(_ level: LogLevel, _ msgClosure: @escaping @autoclosure () -> String, path: StaticString = #file, line: UInt = #line, fun: StaticString = #function) {
        let messageFormatter = MessageFormatter(level: level, path: path, line: line, fun: fun, date: Date())
        queue.addProcess {
            var msg: String?
            for destination in self.destinations {
                if destination.limitOutputLevel.priority < level.priority {
                    continue
                }

                let message = msg ?? msgClosure()
                msg = message
                let formattedMsg = messageFormatter.formatMessage(format: destination.format, msg: message)
                destination.process(formattedMsg, level: level)
            }
        }
    }

    /// –§—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –æ–∂–∏–¥–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –≤—ã–≤–æ–¥–æ–≤ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    /// –ò–º–µ–µ—Ç –ø–æ–±–æ—á–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç - –µ—Å–ª–∏ –≤ –ª–æ–≥ –±—É–¥—É—Ç –ø–∏—Å–∞—Ç—å—Å—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏—è, —Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –∑–∞–∫–æ–Ω—á–∏—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ
    /// –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å –¥–ª—è –¥–æ–∑–∞–ø–∏—Å–∏ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –∫—Ä–∞—à–∞
    public func waitUntilAllOperationsAreFinished() {
        self.queue.syncExecuteAllProcess()
    }
}


/// –ö–ª–∞—Å—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–µ–∫–æ—Ç–æ—Ä–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
private class MessageFormatter
{
    private static let debugFormatter: DateFormatter = {
        let formatter = DateFormatter()
        formatter.dateFormat = "mm:ss.SSS"
        return formatter
    }()
    private static let nanoFormatter: DateFormatter = {
        let formatter = DateFormatter()
        formatter.dateFormat = "HH:mm:ss.SSS"
        return formatter
    }()
    private static let anyFormatter: DateFormatter = {
        let formatter = DateFormatter()
        formatter.dateFormat = "yyyy-MM-dd HH:mm:ss.SSS"
        return formatter
    }()
    private static let fileFormatter: DateFormatter = {
        let formatter = DateFormatter()
        formatter.dateFormat = "MM-dd HH:mm:ss"
        return formatter
    }()

    private let level: LogLevel
    private let path: StaticString
    private let line: UInt
    private let fun: StaticString
    private let date: Date

    private lazy var file: String = {
        return ("\(path)" as NSString).lastPathComponent
    }()

    internal init(level: LogLevel, path: StaticString, line: UInt, fun: StaticString, date: Date) {
        self.level = level
        self.path = path
        self.line = line
        self.fun = fun
        self.date = date
    }

    internal func formatMessage(format: String, msg: String) -> String {
        var result = format
        // –í –ø—Ä–∏–Ω—Ü–∏–ø–µ —ç—Ç–æ –º–æ–∂–Ω–æ —Å–µ—Ä—å–µ–∑–Ω–æ —É—Å–∫–æ—Ä–∏—Ç—å, –Ω–æ –∑–∞—á–µ–º? - –≤—Å–µ—Ä–∞–≤–Ω–æ –Ω–µ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        replaceIfNeed(in: &result, find: "%Dd", on: MessageFormatter.debugFormatter.string(from: self.date))
        replaceIfNeed(in: &result, find: "%Dn", on: MessageFormatter.nanoFormatter.string(from: self.date))
        replaceIfNeed(in: &result, find: "%Da", on: MessageFormatter.anyFormatter.string(from: self.date))
        replaceIfNeed(in: &result, find: "%Df", on: MessageFormatter.fileFormatter.string(from: self.date))
        replaceIfNeed(in: &result, find: "%s", on: "\(self.level.shortName)")
        replaceIfNeed(in: &result, find: "%L", on: "\(self.level.name)")
        replaceIfNeed(in: &result, find: "%e", on: "\(self.level.emoji)")
        replaceIfNeed(in: &result, find: "%F", on: self.file)
        replaceIfNeed(in: &result, find: "%l", on: "\(self.line)")
        replaceIfNeed(in: &result, find: "%M", on: "\(self.fun)")
        replaceIfNeed(in: &result, find: "%m", on: msg)

        return result
    }

    private func replaceIfNeed(in text: inout String, find: String, on substringClosure: @autoclosure () -> String) {
        var substring: String?
        while let range = text.range(of: find) {
            let subtext = substring ?? substringClosure()
            substring = subtext
            text.replaceSubrange(range, with: subtext)
        }
    }

}

extension LogLevel
{
    internal var name: String {
        switch self {
        case .fatal: return "FATAL"
        case .assert: return "ASSERT"
        case .error: return "ERROR"
        case .warning: return "WARNING"
        case .info: return "INFO"
        case .debug: return "DEBUG"
        case .trace: return "TRACE"
        case .none: return ""
        }
    }

    internal var shortName: String {
        switch self {
        case .fatal: return "FTL"
        case .assert: return "AST"
        case .error: return "ERR"
        case .warning: return "WRG"
        case .info: return "INF"
        case .debug: return "DBG"
        case .trace: return "TRC"
        case .none: return ""
        }
    }

    internal var emoji: String {
        switch self {
        case .fatal: return "üõë"
        case .assert: return "‚ÅâÔ∏è"
        case .error: return "‚ùóÔ∏è"
        case .warning: return "‚ö†Ô∏è"
        case .info: return "üîπ"
        case .debug: return "‚ñ∂Ô∏è"
        case .trace: return "üóØ"
        case .none: return ""
        }
    }
}

// –ù–µ–∫–æ—Ç–æ—Ä–∞—è –∑–∞–º–µ–Ω–∞ DispatchQueue –Ω–æ —Å–¥–µ–ª–∞–Ω–Ω–∞—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –ø–æ–¥ –ª–æ–≥–≥–µ—Ä.
// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –æ—á–µ—Ä–µ–¥—å –±—ã—Å—Ç—Ä–µ–µ –Ω–∞ 2 –ø–æ—Ä—è–¥–∫–∞!
// –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ –±—ã—Å—Ç—Ä–µ–µ –≤ 2-3 —Ä–∞–∑–∞
// —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞: 286 * 10^-9 = 0.000000286 —Å–µ–∫—É–Ω–¥—ã –∏–ª–∏ –ø–æ –¥—Ä—É–≥–æ–º—É –∑–∞ —Å–µ–∫—É–Ω–¥—É –æ–∫–æ–ª–æ 3500000 –¥–æ–±–∞–≤–ª–µ–Ω–∏–π
private class Queue: NSObject
{
    private class Element {
        internal let process: () -> Void
        internal var next: Element? = nil

        internal init(process: @escaping () -> Void) {
            self.process = process
        }
    }

    private var head: Element?
    private var tail: Element?

    private let operationLocker = FastLock()
    private let syncCounter = DispatchSemaphore(value: 0)
    private lazy var thread = Thread(target: self, selector: #selector(executor), object: nil)

    // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –¥–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    private var waitingForSynchronization: [DispatchSemaphore] = []

    internal override init() {
        super.init()
        self.thread.name = "LoggerQueue"
        self.thread.start()
    }

    deinit {
        syncExecuteAllProcess()
    }

    internal func addProcess(_ process: @escaping () -> Void) {
        let newElement = Element(process: process)
        // –ù–∞ —Å–∞–º–æ–º –¥–µ–ª–µ —Ç—É—Ç –µ—Å—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–±–ª–µ–º–∞ - –µ—Å–ª–∏ —É –Ω–∞—Å –±—É–¥–µ—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—ã–∑–æ–≤ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏, —Ç–æ –µ—Å—Ç—å —à–∞–Ω—Å,
        // —á—Ç–æ –ø–æ—Ä—è–¥–æ–∫ –ª–æ–≥–æ–≤ –ø–µ—Ä–µ–º–µ—à–∞–µ—Ç—Å—è - —Ç–∞–∫ –∫–∞–∫ —É –ª—é–±–æ–≥–æ –ª–æ–∫–∞ –Ω–µ—Ç –≥–∞—Ä–∞–Ω—Ç–∏–∏, —á—Ç–æ –ø–µ—Ä–≤—ã–π –ø–æ–¥–æ—à–µ–ª –ø–µ—Ä–≤—ã–π –∏ –∑–∞—à–µ–ª
        // –≠—Ç—É –ø—Ä–æ–±–ª–µ–º—É –º–æ–∂–Ω–æ –∏–∑–±–µ–∂–∞—Ç—å —Å–¥–µ–ª–∞–≤ –∞—Ç–æ–º–∞—Ä–Ω—ã–π —Å—á–µ—Ç—á–∏–∫, —É –∫–∞–∂–¥–æ–≥–æ —É–∑–ª–∞ —Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–º–µ—Ä, –∏ –ø—Ä–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏ –Ω–µ –ø–µ—Ä–µ—Å–∫–∞–∫–∏–≤–∞—Ç—å
        // –ù–æ —ç—Ç–æ —Å–µ—Ä—å–µ–∑–Ω–æ —É—Å–ª–æ–∂–Ω–∏—Ç —Ä–µ—à–µ–Ω–∏–µ, –∏ –ø–æ–∫–∞ –º–æ–∂–Ω–æ –∑–∞–±–∏—Ç—å - —ç—Ç–∞ –ø—Ä–æ–±–ª–µ–º–∞ –≤–æ–∑–Ω–∏–∫–Ω–µ—Ç —Ç–æ–∫ –ø—Ä–∏ –±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ª–æ–≥–æ–≤.
        // –¢–µ–º –±–æ–ª–µ–µ –Ω–∞ —Ç–µ—Å—Ç–µ –≤ 50–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Ü–∏–∫–ª–µ –ø–æ—Ä—è–¥–æ–∫ –Ω–µ –ª–æ–º–∞–µ—Ç—Å—è
        operationLocker.lock()
        if let tail = self.tail {
            tail.next = newElement
            self.tail = newElement
        } else {
            self.head = newElement
            self.tail = newElement
        }
        operationLocker.unlock()
        syncCounter.signal()
    }

    internal func syncExecuteAllProcess() {
        // –ù–µ —á–∞—Å—Ç–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è - –≤ –∏–¥–µ–∞–ª–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥ –∫—Ä–∞—à–µ–º.
        operationLocker.lock()
        // –î–∞–±—ã –Ω–µ —É–π—Ç–∏ –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–µ—Ç
        var waiter: DispatchSemaphore? = nil
        if head != nil {
            // –≠—Ç–æ –∂–µ—Å–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ - –Ω–æ —Å–∫–æ—Ä–µ–π –≤—Å–µ–≥–æ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –±—É–¥–µ—Ç, –∫—Ç–æ–º—É–∂–µ –º—ã –≤—Å–µ—Ä–∞–≤–Ω–æ –ø–∞–¥–∞–µ–º :)
            let newWaiter = DispatchSemaphore(value: 0)
            waiter = newWaiter
            waitingForSynchronization.append(newWaiter)
        }
        operationLocker.unlock()

        waiter?.wait()
    }

    @objc
    private func executor() {
        while !thread.isCancelled {
            syncCounter.wait()

            operationLocker.lock()
            let element = head
            head = head?.next

            var waitingForSynchronization: [DispatchSemaphore] = []
            if head == nil {
                waitingForSynchronization = self.waitingForSynchronization
                tail = nil
            }
            operationLocker.unlock()

            if let element = element {
                element.process()

                // –ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ –∂–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π, —Ç–æ –æ–ø–æ–≤–µ—Å—Ç–∏–º —á—Ç–æ —ç—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ.
                waitingForSynchronization.forEach { $0.signal() }
                continue
            }
        }
    }

}
